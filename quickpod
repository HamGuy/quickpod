#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'fileutils'
require 'cocoapods'

program :name, 'quickpod'
program :version, '0.0.2'
program :description, 'release pod quickly'

def execute(command, options = {})
    options = { :optional => false }.merge options
    abort unless (system(command) || options[:optional])
end

command :init do |c|
  c.syntax = 'quickpod init [options]'
  c.summary = ''
  c.description = 'initlize the fastlane environment'
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Hamguy::Commands::Init
    dirname = File.join(Dir.pwd,'fastlane')
    # FileUtils.mkdir_p(dirname) unless File.directory?(dirname)

    filename = File.join(dirname, 'Fastfile')
    # puts filename
    # FileUtils.rm(filename) unless !File.exist?(filename)
    tmppath = "/tmp/releasepod_fastlane_templete"
    execute ("echo Starting Download Fastlane Template.")
    execute "git clone https://github.com/HamGuy/releasepod_fastlane_templete.git #{tmppath}"
    execute ("echo Download Fastlane Template Successed!")
    execute "mv -f #{tmppath}/fastlane #{dirname}"
    execute "rm -rf #{tmppath}"

    specs = Dir.entries(Dir.home+'/.cocoapods/repos').select{ |item| !item.start_with?('.') }
    spec_name = choose('Please choose the target repo specs?', *specs)
    target_git_repo = ask('Please input the specs git repo address below:')
    outdata = File.read(filename)
    outdata = outdata.gsub('targetSpec', spec_name).gsub('targetRepoGit',target_git_repo)
    File.open(filename, 'w') do |f|
      f.write(outdata)
    end  
    execute ("echo Init fastlane configuration successed!")
  end
end

command :update do |c|
  c.syntax = 'quickpod update [options]'
  c.summary = ''
  c.description = 'Update pod to target version'
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called quickpod::Commands::Update
    version = args[0]
    message = args[1]
    puts "target-version #{version}"
    puts "commit-message #{message}"
        
    if message
      execute "fastlane release_pod version:#{version} message:#{message}"
    else
      command = "fastlane release_pod version:#{version}" 
      execute(command)
    end
    
  end
end

