#!/usr/bin/python
# -*- coding: utf-8 -*-

import click
import requests
import os
import math
import sys
import subprocess
import fcntl


def download_file(url, local_filename):
    """
    Downlod file to specific path
    """
    r = requests.get(url, stream=True)
    total_size = int(r.headers['Content-Length'])
    with click.progressbar(r.iter_content(1024), length=total_size, label="Downloading:") as bar, open(local_filename, 'wb') as f:
        for chunk in bar:
            if chunk:
                f.write(chunk)
                bar.update(len(chunk))
    if os.path.isfile(local_filename):
        click.echo('Success downloading')
        return True
    return False


def non_block_read(output):
    fd = output.fileno()
    fl = fcntl.fcntl(fd, fcntl.F_GETFL)
    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)
    try:
        return output.read()
    except EOFError:
        raise EOFError
    except Exception, e:
        pass


def excute_command(command):
    try:
        p = subprocess.Popen(
            command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
        while True:
            data = non_block_read(p.stdout)
            print data
            if p.poll() is not None:
                break
    except Exception, e:
        print e


@click.group()
def cli():
    pass


@click.command()
# @click.argument('name')
def init():
    """初始化 quickpod
    1.判断是否存在fastlane目录，如果没有则创建
    2.下载模版文件到指定目录
    3.更新模版文件
    """
    dirname = os.path.join(os.getcwd(), 'fastlane')

    print dirname
    if not os.path.exists(dirname):
        click.echo("Can not find directory '%s' , create" % dirname)
        os.mkdir(dirname)
        click.echo("Create directory '%s'" % dirname)
    else:
        click.echo("Directory '%s' exists" % dirname)

    fastlaneFileName = os.path.join(dirname, 'Fastfile')
    if os.path.isfile(fastlaneFileName):
        os.remove(fastlaneFileName)

    target_url = 'https://raw.githubusercontent.com/ripperhe/fastlane-files/master/fastlane/Fastfile'
    download_file(target_url, fastlaneFileName)


@click.command()
@click.argument('version')
@click.argument('message', required=False)
def update(version, message):
    """更新 pod spec 版本"""

    excute_command("pod lib create test")
    return

    command = ''
    if message:
        command = 'fastlane release_pod version:"%s" message: %s' % (
            version, message)
    else:
        command = 'fastlane release_pod version:"%s"' % version
    excute_command(command)


cli.add_command(init)
cli.add_command(update)

if __name__ == "__main__":
    cli()
